#include "../third_party/chameleon/source/background_cleaner.hpp"
#include "../third_party/chameleon/source/dvs_display.hpp"
#include "../third_party/sepia/source/sepia.hpp"
#include "../third_party/tarsier/source/track_blob.hpp"
#include "mask_isolated.hpp"
#include <QQmlPropertyMap>
#include <QtGui/QGuiApplication>
#include <QtQml/QQmlApplicationEngine>
#include <QtQml/QQmlContext>

/// filename points to the Event Stream file to read.
const auto filename = sepia::join({sepia::dirname(sepia::dirname(__FILE__)),
                                   "third_party",
                                   "sepia",
                                   "third_party",
                                   "event_stream",
                                   "examples",
                                   "dvs.es"});

int main(int argc, char* argv[]) {
    // read the header
    const auto header = sepia::read_header(sepia::filename_to_ifstream(filename));

    // create the Qt Application
    QGuiApplication app(argc, argv);

    // register Chameleon types
    qmlRegisterType<chameleon::background_cleaner>("Chameleon", 1, 0, "BackgroundCleaner");
    qmlRegisterType<chameleon::dvs_display>("Chameleon", 1, 0, "DvsDisplay");

    // pass the header properties to qml
    QQmlApplicationEngine application_engine;
    application_engine.rootContext()->setContextProperty("header_width", header.width);
    application_engine.rootContext()->setContextProperty("header_height", header.height);

    // create a qml/c++ bridge
    std::atomic<uint64_t> temporal_window;
    QQmlPropertyMap parameters;
    parameters.insert("temporal_window", temporal_window.load(std::memory_order_acquire));
    QQmlPropertyMap::connect(
        &parameters, &QQmlPropertyMap::valueChanged, &parameters, [&](const QString&, const QVariant& value) {
            temporal_window.store(value.toUInt(), std::memory_order_relaxed);
        });
    application_engine.rootContext()->setContextProperty("parameters", &parameters);

    // load the view and setup the window properties for OpenGL renderring
    application_engine.loadData(
#include "live_tweaking.qml"
    );
    auto window = qobject_cast<QQuickWindow*>(application_engine.rootObjects().first());
    {
        QSurfaceFormat format;
        format.setDepthBufferSize(24);
        format.setStencilBufferSize(8);
        format.setVersion(3, 3);
        format.setProfile(QSurfaceFormat::CoreProfile);
        window->setFormat(format);
    }

    // retrieve pointers to the display generated by qml
    auto dvs_display = window->findChild<chameleon::dvs_display*>("dvs_display");

    // create the event handling pipeline
    auto observable = sepia::make_observable<sepia::type::dvs>(
        sepia::filename_to_ifstream(filename),
        tarsier::make_mask_isolated<sepia::dvs_event>(
            header.width,
            header.height,
            temporal_window,
            [&](sepia::dvs_event dvs_event) { dvs_display->push(dvs_event); }),
        [](std::exception_ptr) {},
        []() { return true; });

    // run the Qt Application
    return app.exec();
}
